/*
 * Swagger Blog
 *
 * A Simple Blog
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/binary"
	"github.com/dgrijalva/jwt-go"
	"github.com/dgrijalva/jwt-go/request"
	"strconv"
	"strings"
	"time"

	//"encoding/binary"
	"encoding/json"
	"errors"
	"fmt"
	//"strings"

	"github.com/boltdb/bolt"
	"log"
	"net/http"
)

type ErrorResponse struct {
	Error string `json:"error"`
}

type Response struct {
	Data string `json:"data"`
}

type Token struct {
	Token string `json:"token"`
}
const (
	SecretKey = "sampleblog"
)

func fatal(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
func itob(v int) []byte {
	b := make([]byte, 8)
	binary.BigEndian.PutUint64(b, uint64(v))
	return b
}

func itob32(v int32) []byte {
	b := make([]byte, 8)
	binary.BigEndian.PutUint64(b, uint64(v))
	return b
}

func GetUserArticles(w http.ResponseWriter, r *http.Request) {
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}
	defer db.Close()
	username := strings.Split(r.URL.Path,"/")[2]
	var Untiles ArticlesResponse


	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Articles"))
		if b != nil	{
			b.ForEach(func(k, v []byte) error {
				var tempA ArticleResponse
				var tempB Article
				 _ = json.Unmarshal(v,&tempA)
				 _ = json.Unmarshal(v,&tempB)
				 if tempB.Username == username	{

				 	Untiles.Articles = append(Untiles.Articles,tempA)
				 }
				 return nil
			})
			return nil
		} else {
			return errors.New("Articles  Not Exists")
		}
		
	})
	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusNotFound)
		return
	}
	JsonResponse(Untiles,w,http.StatusOK)
}
//登录
func SignIn(w http.ResponseWriter, r *http.Request) {
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}
	defer db.Close()
	var user LUser
	err = json.NewDecoder(r.Body).Decode(&user)
	
	if err!= nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusBadRequest)
		return
	}
	var rightuser SUser
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))

		if b!= nil	{//User 存在
			c := b.Cursor()
			for k, v := c.First(); k != nil; k, v = c.Next() {
				var tu User
				_ = json.Unmarshal(v,&tu)
				if tu.Password == user.Password	{
					rightuser.Username = tu.Username
					rightuser.Email = tu.Email
					rightuser.ID = tu.ID
					return nil
				}
			}
			return fmt.Errorf("Wrong  Password for user:%s",user.Username)

		}else {
			return  errors.New("Wrong  Username")
		}
	})

	if err != nil {
		response := ErrorResponse{err.Error()}
		JsonResponse(response, w, http.StatusNotFound)
		return
	}
	/*
	token := jwt.New(jwt.SigningMethodHS256)
	claims := make(jwt.MapClaims)
	claims["exp"] = time.Now().Add(time.Hour * time.Duration(1)).Unix()
	claims["iat"] = time.Now().Unix()
	token.Claims = claims

	if err != nil {
		fatal(err)
	}

	tokenString, err := token.SignedString([]byte(user.Username))
	if err != nil {
		fatal(err)
	}
	*/
	//response := Token{tokenString}

	JsonResponse(rightuser, w, http.StatusOK)

}
//注册
func SignUp(w http.ResponseWriter, r *http.Request) {
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}

	defer db.Close()

	var user User
	err = json.NewDecoder(r.Body).Decode(&user)
	//检查提交用户信息是否为空
	if err != nil || user.Password == "" || user.Username == "" || user.Email == ""	{
		response := ErrorResponse{"Wrong username or PassWord or Email"}
		JsonResponse(response,w,http.StatusBadRequest)
		return
	}
	//检查用户昵称是否重复
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		if b != nil	{
			v := b.Get([]byte(user.Username))
			if v != nil	{
				return errors.New("User has exists")
			}
		}
		return nil
	})
	//用户重复
	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusBadRequest)
		return
	}
	//用户不重复，进行添加操作
	err = db.Update(func(tx *bolt.Tx) error {
		b,err := tx.CreateBucketIfNotExists([]byte("Users"))
		if err != nil	{

			return fmt.Errorf("create bucket: %s", err)
		}
		id,_ := b.NextSequence()
		user.ID = int(id)

		buf,err := json.Marshal(user)
		if err != nil	{
			return fmt.Errorf("create user: %s", err)
		}

		err = b.Put(itob(user.ID), buf)
		if err != nil	{
			return fmt.Errorf("create user: %s", err)
		}
		return nil
	})
	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusBadRequest)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With,Content-Type")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
}



func ByteSliceEqual(a, b []byte) bool {
	if len(a) != len(b) {
		return false
	}
	if (a == nil) != (b == nil) {
		return false
	}
	for i, v := range a {
		if v != b[i] {
			return false
		}
	}
	return true
}

func JsonResponse(response interface{}, w http.ResponseWriter, code int) {
	json, err := json.Marshal(response)
	if err != nil {
		log.Fatal(err)
		return
	}

	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With,Content-Type,Authorization")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	w.Write(json)
}

func GetAllUser(w http.ResponseWriter, r *http.Request)	{
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}
	defer db.Close()

	var allUser AUsers
	var user SUser
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		if b != nil	{
			c := b.Cursor()

			for k,v := c.First();k != nil; k,v = c.Next()  {
				err = json.Unmarshal(v,&user)
				if err != nil	{
					return err
				}
				allUser.Contents = append(allUser.Contents,user)
			}

		}
		return nil
	})

	if err != nil	{
		response := ErrorResponse{err.Error()}
		JsonResponse(response,w,http.StatusNotFound)
		return
	}
	JsonResponse(allUser,w,http.StatusOK)
}

func CreateComment(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	articleId := strings.Split(r.URL.Path, "/")[3]
	Id, err := strconv.Atoi(articleId)
	if err != nil {
		response := ErrorResponse{"Wrong ArticleId"}
		JsonResponse(response, w, http.StatusBadRequest)
		return
	}
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Articles"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("Article Not Exists")
			} else {
				return nil
			}
		}
		return errors.New("Article Not Exists")
	})

	if err != nil {
		response := ErrorResponse{err.Error()}
		JsonResponse(response, w, http.StatusBadRequest)
		return
	}

	comment := &Comment{
		Date:      time.Now().Format("2006-01-02 15:04:05"),
		Content:   "",
		Author:    "",
		ArticleId: int32(Id),
	}
	err = json.NewDecoder(r.Body).Decode(&comment)
	//comment
	if err != nil || comment.Content == "" {
		w.WriteHeader(http.StatusBadRequest)
		if err != nil {
			response := ErrorResponse{err.Error()}
			JsonResponse(response, w, http.StatusBadRequest)
		} else {
			response := ErrorResponse{"There is no content in your article"}
			JsonResponse(response, w, http.StatusBadRequest)
		}
		return
	}

	token, err := request.ParseFromRequest(r, request.AuthorizationHeaderExtractor,
		func(token *jwt.Token) (interface{}, error) {
			return []byte(comment.Author), nil
		})

	if err == nil {
		if token.Valid {

			err = db.Update(func(tx *bolt.Tx) error {
				b, err := tx.CreateBucketIfNotExists([]byte("Comments"))
				if err != nil {
					return err
				}
				id, _ := b.NextSequence()
				encoded, err := json.Marshal(comment)
				return b.Put(itob(int(id)), encoded)
			})

			if err != nil {
				response := ErrorResponse{err.Error()}
				JsonResponse(response, w, http.StatusBadRequest)
				return
			}

			JsonResponse(comment, w, http.StatusOK)
		} else {
			response := ErrorResponse{"Token is not valid"}
			JsonResponse(response, w, http.StatusUnauthorized)
		}
	} else {
		response := ErrorResponse{"Unauthorized access to this resource"}
		JsonResponse(response, w, http.StatusUnauthorized)
	}
}