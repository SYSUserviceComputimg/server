/*
 * Swagger Blog
 *
 * A Simple Blog
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"github.com/boltdb/bolt"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
	//str,_ := ioutil.ReadFile("./go//api")
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}
	defer db.Close()
	var a Comment
	err = db.Update(func(tx *bolt.Tx) error {
		b,err := tx.CreateBucketIfNotExists([]byte("Comments"))
		if err != nil	{
			return err
		}
		id,_ := b.NextSequence()
		a.ArticleId = 4
		a.Content = "this is a test for comment test2"
		a.Date = "2020-01-01 00:02"
		a.Author = "tempusername"
		buf,err := json.Marshal(a)
		if err != nil	{
			return err
		}
		return b.Put(itob(int(id)),buf)
	})

	/*
	var user User
	err = db.Update(func(tx *bolt.Tx) error {
		b,err := tx.CreateBucketIfNotExists([]byte("Users"))
		if err != nil	{
			return err
		}
		id,_ := b.NextSequence()
		user.ID = int(id)
		user.Username = "2"
		user.Email = "2@2.com"
		user.Password = "2222"

		buf,err:= json.Marshal(user)
		if err != nil	{
			return  err
		}
		return b.Put(itob(user.ID),buf)
	})

	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusBadRequest)
		return
	}
	var a Article
	var atag Tag
	atag.Name = "test"
	a.Tags = append(a.Tags,atag)
	err = db.Update(func(tx *bolt.Tx) error {
		b,err := tx.CreateBucketIfNotExists([]byte("Articles"))
		if err != nil	{
			return err
		}
		id,_ := b.NextSequence()
		a.Id = int32(id)
		a.Date = "2020-01-01 00:00:00"
		a.Name = "Articles one for test"
		a.Username = "1"
		a.Content = "<p>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<p>"
		buf,err := json.Marshal(a)
		if err != nil	{
			return err
		}
		return b.Put(itob32(a.Id),buf)
	})
	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusBadRequest)
		return
	}*/
}




var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v3/",
		Index,
	},

	Route{
		"CreateComment",
		strings.ToUpper("Post"),
		"/v3/article/{id}/comment",
		CreateComment,
	},

	Route{
		"GetArticleById",
		strings.ToUpper("Get"),
		"/v3/article/{id}",
		GetArticleById,
	},

	Route{
		"GetArticles",
		strings.ToUpper("Get"),
		"/v3/articles",
		GetArticles,
	},

	Route{
		"GetCommentsOfArticle",
		strings.ToUpper("Get"),
		"/v3/article/{id}/comments",
		GetCommentsOfArticle,
	},
	//finish
	Route{
		"GetUserArticles",
		strings.ToUpper("Get"),
		"/v3/{username}/articles",
		GetUserArticles,
	},
	//no test
	Route{
		"SignIn",
		strings.ToUpper("Post"),
		"/v3/signIn",
		SignIn,
	},
	//no test
	Route{
		"SignUp",
		strings.ToUpper("Post"),
		"/v3/signUp",
		SignUp,
	},
	//finish
	Route{
		Name:        "GetAllUsers",
		Method:      strings.ToUpper("Get"),
		Pattern:     "/v3/getAllUser",
		HandlerFunc: GetAllUser,
	},
	Route{
		Name:        "CreateArticle",
		Method:      "POST",
		Pattern:     "/v3/CreateArticle",
		HandlerFunc: CreateArticle,
	},
}
