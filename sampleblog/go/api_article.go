/*
 * Swagger Blog
 *
 * A Simple Blog
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/boltdb/bolt"
	"log"
	"net/http"
	"strconv"
	"strings"
)



func GetArticleById(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	articleId := strings.Split(r.URL.Path, "/")[3]
	Id, err:= strconv.Atoi(articleId)
	if err != nil {
		res := ErrorResponse{"Wrong ArticleId"}
		JsonResponse(res, w, http.StatusBadRequest)
		return
	}
	var article Article
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Articles"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("this Article Not Exists ex1")
			} else {
				_ = json.Unmarshal(v, &article)
				return nil
			}
		} else {
			return errors.New("this Article Not Exists ex2")
		}
	})

	if err != nil {
		res := ErrorResponse{err.Error()}
		JsonResponse(res, w, http.StatusNotFound)
		return
	}

	JsonResponse(article, w, http.StatusOK)
}

func GetArticles(w http.ResponseWriter, r *http.Request) {
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}
	defer db.Close()

	var Untiles ArticlesResponse


	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Articles"))
		if b != nil	{
			b.ForEach(func(k, v []byte) error {
				var tempA ArticleResponse
				_ = json.Unmarshal(v,&tempA)
				Untiles.Articles = append(Untiles.Articles,tempA)
				return nil
			})
			return nil
		} else {
			return errors.New("Articles  Not Exists")
		}

	})
	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusNotFound)
		return
	}
	JsonResponse(Untiles,w,http.StatusOK)
}

func GetCommentsOfArticle(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	articleId := strings.Split(r.URL.Path, "/")[3]
	Id, err:= strconv.Atoi(articleId)
	if err != nil {
		res := ErrorResponse{"Wrong ArticleId"}
		JsonResponse(res, w, http.StatusBadRequest)
		return
	}
	var article []byte
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Articles"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("this Article Not Exists1")
			} else {
				article = v
				return nil
			}
		} else {
			return errors.New("this Article Not Exists")
		}
	})

	if err != nil {
		res := ErrorResponse{err.Error()}
		JsonResponse(res, w, http.StatusNotFound)
		return
	}
	var comments Comments
	var comment Comment
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Comments"))
		if b != nil {
			c := b.Cursor()

			for k, v := c.First(); k != nil; k, v = c.Next() {
				err = json.Unmarshal(v, &comment)
				if err != nil {
					return err
				}
				if comment.ArticleId == int32(Id) {
					comments.Contents = append(comments.Contents, comment)
				}
			}

			return nil
		} else {
			return errors.New("this Comment Not Exists")
		}
	})

	if err != nil {
		res := ErrorResponse{err.Error()}
		JsonResponse(res, w, http.StatusNotFound)
		return
	}

	JsonResponse(comments, w, http.StatusOK)
}
func CreateArticle(w http.ResponseWriter, r *http.Request)	{
	db,err := bolt.Open("my.db",0600,nil)
	if err != nil	{
		log.Fatal(err)
	}

	defer db.Close()

	var art Article
	err = json.NewDecoder(r.Body).Decode(&art)
	//检查提交用户信息是否为空
	if err != nil || art.Username == "" || art.Content == "" || art.Name == ""{
		response := ErrorResponse{"the article's name or Username or content is empty"}
		JsonResponse(response,w,http.StatusBadRequest)
		return
	}
	//进行添加操作
	err = db.Update(func(tx *bolt.Tx) error {
		b,err := tx.CreateBucketIfNotExists([]byte("Articles"))
		if err != nil	{

			return fmt.Errorf("create bucket: %s", err)
		}
		id,_ := b.NextSequence()
		art.Id = int32(id)

		buf,err := json.Marshal(art)
		if err != nil	{
			return fmt.Errorf("create article: %s", err)
		}

		err = b.Put(itob32(art.Id), buf)
		if err != nil	{
			return fmt.Errorf("create article: %s", err)
		}
		return nil
	})
	if err != nil	{
		res := ErrorResponse{err.Error()}
		JsonResponse(res,w,http.StatusBadRequest)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With,Content-Type")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
}